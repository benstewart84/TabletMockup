@using Newtonsoft.Json
@using Booker.WebUI.Helpers
@model Booker.WebUI.ViewModels.JobLogging.LogJobViewModel
@{
    var isEngineer = User.IsInRole(UserManagementHelper.EngineerRoleName);
    if (isEngineer)
    {
        ViewBag.Title = "Log Job for Store";
    }
    else
    {
        ViewBag.Title = "Log Job for Store " + User.Identity.Name;
    }
}

<link rel="stylesheet" href="/kendo/styles/kendo.common-bootstrap.min.css" />
<link rel="stylesheet" href="/kendo/styles/kendo.bootstrap.min.css" />

<script src="/kendo/js/jquery.min.js"></script>
<script src="/kendo/js/kendo.all.min.js"></script>

<div class="main-content">
    <div class="container" id="Login">
        <div class="row">
            <div class="col-xs-12">
                <h2 id="Title">@ViewBag.Title</h2>

                @if (@ViewBag.JobId != null)
                {
                    <div id="notificationContainer" style="margin-top:15px;margin-bottom:15px;">
                        <span id="notification"></span>
                    </div>

                    <script>
                        $(function () {
                            var notification = $("#notification").kendoNotification({
                                appendTo: "#notificationContainer",
                                autoHideAfter: 0,
                                allowHideAfter: 1000,
                                button: true,
                                hideOnClick: false
                            }).data("kendoNotification");
                            notification.show("Thank you for successfully logging job #@ViewBag.JobId.", "success");
                        });
                    </script>
                }

                <form id="LogJobForm" action="/JobLogging/LogJob" method="post">
                    @Html.AntiForgeryToken()

                    <div id="ValidationSummary" class="validation-summary-errors" style="display:none">
                        <ul></ul>
                    </div>

                    @if (isEngineer)
                    {
                        <div class="form-group">
                            <label for="StoreId">Store</label>
                            <input name="StoreId" id="StoreId" />
                        </div>
                    }
                    else
                    {
                        <input type="hidden" name="StoreId" id="StoreId" value="@Model.StoreId" />
                    }

                    <div class="form-group">
                        <label for="AssetId">Asset Tag</label>
                        <input name="AssetId" id="AssetId" />
                    </div>

                    <div class="form-group">
                        <label for="FaultServiceId">Fault Service</label>
                        <input name="FaultServiceId" id="FaultServiceId" />
                    </div>

                    <div class="form-group">
                        <label for="AssetLocationId">Asset Location</label>
                        <input name="AssetLocationId" id="AssetLocationId" />
                    </div>

                    <div class="form-group">
                        <label for="FaultTypeId">Fault Type</label>
                        <input name="FaultTypeId" id="FaultTypeId" />
                    </div>

                    <div class="form-group">
                        <label style="display:inline-block">Fault Priority:&nbsp;</label><label style="display:inline-block" id="FaultPriority"></label>
                    </div>

                    <div class="form-group">
                        <label for="FaultDescription">Fault Description</label>
                        <textarea name="FaultDescription" id="FaultDescription" class="form-control" maxlength="8000"></textarea>
                    </div>

                    <div class="form-group">
                        <label for="LoggedBy">Logged By</label>
                        <input type="text" name="LoggedBy" id="LoggedBy" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="StoreContact">Store Contact</label>
                        <input type="text" name="StoreContact" id="StoreContact" class="form-control" />
                    </div>

                    <div id="PotentialDuplicates" style="display:none">
                        <label style="margin-bottom:5px;">Possible Duplicates</label>
                        <table class="table table-responsive">
                            <thead>
                                <tr>
                                    <th>Fault Id</th>
                                    <th>Asset Tag</th>
                                    <th>Fault Service</th>
                                    <th>Asset Location</th>
                                    <th>Fault Description</th>
                                    <th>Reason for Match</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>

                    <div>
                        @if (!isEngineer)
                        {
                            <input type="button" id="Back" class="btn btn-default" value="Back" />
                        }
                        <input type="button" id="Submit" class="btn btn-primary" value="Submit" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    $(function () {

        var isEngineer = @(isEngineer ? "true" : "false");
        var defaultWidth = "50%";

        var storeIdComboBox;
        var assetIdComboBox;
        var faultServiceIdComboBox;
        var assetLocationIdComboBox;
        var faultTypeIdComboBox;

        var storeId = @Model.StoreId;
        var assetId;
        var faultServiceId;
        var assetLocationId;
        var faultTypeId;

        init();

        function renderStoreIdComboBox() {
            storeIdComboBox = $("#StoreId").width(defaultWidth).kendoComboBox({
                autoBind: false,
                change: function (e) {

                    // Clean the value.
                    if (this.value() && this.select() === -1) {
                        this.value(null);
                    }
                    storeId = this.value();

                    // Manage the dependants.
                    assetIdComboBox.value(null);
                    assetIdComboBox.trigger("change");
                    assetIdComboBox.dataSource.read();
                    assetIdComboBox.enable(storeId ? true : false);
                    faultServiceIdComboBox.value(null);
                    faultServiceIdComboBox.trigger("change");
                    faultServiceIdComboBox.dataSource.read();
                    faultServiceIdComboBox.enable(storeId ? true : false);

                    // Update the title.
                    $('#Title').html('Log Job for Store ' + this.text());
                },
                dataBound: function (e) {
                    //this.trigger("change");
                },
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            url: function(){
                                return "/JobLogging/GetStoreOptions";
                            },
                        }
                    }
                },
                filter: "contains",
                placeholder: "Select a Store"
            }).data("kendoComboBox");
        }

        function renderAssetIdComboBox() {
            assetIdComboBox = $("#AssetId").width(defaultWidth).kendoComboBox({
                autoBind: false,
                change: function (e) {

                    // Clean the value.
                    if (this.value() && this.select() === -1) {
                        this.value(null);
                    }
                    assetId = this.value();

                    // Manage the sibling.
                    if (storeId && !assetId) {
                        faultServiceIdComboBox.enable(true);
                    } else {
                        faultServiceIdComboBox.enable(false);
                    }

                    // Manage the dependant.
                    faultTypeIdComboBox.value(null);
                    faultTypeIdComboBox.trigger("change");
                    faultTypeIdComboBox.dataSource.read();
                    faultTypeIdComboBox.enable(assetId ? true : false);
                },
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            url: function (){
                                return "/JobLogging/GetAssetOptions?storeId=" + storeId
                            },
                        }
                    }
                },
                filter: "contains",
                placeholder: "Select an Asset Tag"
            }).data("kendoComboBox");
        }

        function renderFaultServiceIdComboBox() {
            faultServiceIdComboBox = $("#FaultServiceId").width(defaultWidth).kendoComboBox({
                autoBind: false,
                change: function (e) {

                    // Clean the value.
                    if (this.value() && this.select() === -1) {
                        this.value(null);
                    }
                    faultServiceId = this.value();

                    // Manage the sibling.
                    if (storeId && !faultServiceId) {
                        assetIdComboBox.enable(true);
                    } else {
                        assetIdComboBox.enable(false);
                    }

                    // Manage the dependants.
                    assetLocationIdComboBox.value(null);
                    assetLocationIdComboBox.trigger("change");
                    assetLocationIdComboBox.dataSource.read();
                    assetLocationIdComboBox.enable(faultServiceId ? true : false);
                    faultTypeIdComboBox.value(null);
                    faultTypeIdComboBox.trigger("change");
                    faultTypeIdComboBox.dataSource.read();
                    faultTypeIdComboBox.enable(faultServiceId ? true : false);
                },
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            url: function(){
                                return "/JobLogging/GetFaultServiceOptions?storeId=" + storeId
                            },
                        }
                    }
                },
                filter: "contains",
                placeholder: "Select a Fault Service"
            }).data("kendoComboBox");
        }

        function renderAssetLocationIdComboBox() {
            assetLocationIdComboBox = $("#AssetLocationId").width(defaultWidth).kendoComboBox({
                autoBind: false,
                change: function (e) {

                    // Clean the value.
                    if (this.value() && this.select() === -1) {
                        this.value(null);
                    }
                    assetLocationId = this.value();

                    // Render.
                    renderPotentialDuplicates();
                },
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            url: function(){
                                return "/JobLogging/GetAssetLocationOptions?storeId=" + storeId + "&faultServiceId=" + faultServiceId;
                            },
                        }
                    }
                },
                filter: "contains",
                placeholder: "Select an Asset Location"
            }).data("kendoComboBox");
        }

        function renderFaultTypeIdComboBox() {
            faultTypeIdComboBox = $("#FaultTypeId").width(defaultWidth).kendoComboBox({
                autoBind: false,
                change: function (e) {

                    // Clean the value.
                    if (this.value() && this.select() === -1) {
                        this.value(null);
                    }
                    faultTypeId = this.value();

                    // Render.
                    renderFaultPriority();
                    renderPotentialDuplicates();
                },
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: {
                    transport: {
                        read: {
                            dataType: "json",
                            url: function(){
                                return "/JobLogging/GetFaultTypeOptions?storeId=" + storeId + "&assetId=" + assetId + "&faultServiceId=" + faultServiceId;
                            },
                        }
                    }
                },
                filter: "contains",
                placeholder: "Select a Fault Type"
            }).data("kendoComboBox");
        }

        function renderFaultPriority() {
            var args = {
                faultTypeId: faultTypeIdComboBox.value()
            };
            if (!args.faultTypeId) {
                $('#FaultPriority').html('');
                return;
            }
            $.get("/JobLogging/GetFaultPriority", args, function (data) {
                $('#FaultPriority').html(data.Name);
            });
        }

        function renderPotentialDuplicates() {
            var args = {
                storeId: storeId,
                assetTag: assetIdComboBox.text(),
                faultServiceId: faultServiceId,
                assetLocationId: assetLocationId
            };
            if (!args.assetTag && !(args.faultServiceId && args.assetLocationId)) {
                $('#PotentialDuplicates').hide();
                $('#PotentialDuplicates tbody').html('');
                return;
            }
            $.get('/JobLogging/GetPotentialDuplicates', args, function (data) {
                if (!data.length) {
                    $('#PotentialDuplicates').hide();
                    $('#PotentialDuplicates tbody').html('');
                    return;
                }
                var trs = '';
                for (var i = 0; i < data.length; i++) {
                    var item = data[i];
                    trs +=
                    '<tr>' +
                        '<td>' + item.FaultId + '</td>' +
                        '<td>' + item.AssetTag + '</td>' +
                        '<td>' + item.FaultService + '</td>' +
                        '<td>' + item.Location + '</td>' +
                        '<td>' + item.FaultDescription + '</td>' +
                        '<td>' + item.DuplicateReason + '</td>' +
                    '</tr>';
                }
                $('#PotentialDuplicates').show();
                $('#PotentialDuplicates tbody').html('').append(trs);
            });
        }

        $('#Back').on('click', function (e) {
            var pristine = true;
            var inputs = $('#LogJobForm :input').not('[type="button"], [name="__RequestVerificationToken"]');
            inputs.each(function (i, input) {
                if ($(input).val().trim().length) {
                    pristine = false;
                    return false;
                }
            });

            if (!pristine) {
                if (confirm("Your changes will be lost if you continue.")) {
                    document.location.href = '/SingleStoreLogin/';
                }
            } else {
                document.location.href = '/SingleStoreLogin/';
            }
        });

        $('#Submit').on('click', function () {
            var fields = $('#LogJobForm').serializeArray();
            $.post('/JobLogging/Validate', fields, function (data) {
                if (data.IsValid) {
                    $('#ValidationSummary').hide();
                    $('#LogJobForm').submit();
                } else {
                    $('#ValidationSummary li').remove();
                    $('#ValidationSummary').show();
                    // Show any errors in field order for usability.
                    appendErrorMessageFor('StoreId');
                    appendErrorMessageFor('AssetId');
                    appendErrorMessageFor('FaultServiceId');
                    appendErrorMessageFor('AssetLocationId');
                    appendErrorMessageFor('FaultTypeId');
                    appendErrorMessageFor('FaultDescription');
                    appendErrorMessageFor('LoggedBy');
                    appendErrorMessageFor('StoreContact');
                }

                function appendErrorMessageFor(fieldName) {
                    var error = data.Errors.find(function (e) { return e.Field === fieldName });
                    if (error) {
                        $('#ValidationSummary ul').append('<li>' + error.Message + '</li>');
                        if(fieldName.endsWith('Id')){
                            $('[name="' + fieldName + '_input"]').closest('.k-dropdown-wrap').addClass('has-error');
                        } else {
                            $('#' + fieldName).addClass('has-error');
                        }
                    } else {
                        if(fieldName.endsWith('Id')){
                            $('[name="' + fieldName + '_input"]').closest('.k-dropdown-wrap').removeClass('has-error');
                        } else {
                            $('#' + fieldName).removeClass('has-error');
                        }
                    }
                }
            });
        });

        function init() {

            if(isEngineer){
                renderStoreIdComboBox();
            }
            renderAssetIdComboBox();
            renderFaultServiceIdComboBox();
            renderAssetLocationIdComboBox();
            renderFaultTypeIdComboBox();

            if(isEngineer){
                assetIdComboBox.enable(false);
                faultServiceIdComboBox.enable(false);
            }
            assetLocationIdComboBox.enable(false);
            faultTypeIdComboBox.enable(false);
        }
    });
</script>
