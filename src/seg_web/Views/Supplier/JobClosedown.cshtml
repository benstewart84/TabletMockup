@using Booker.WebUI.Helpers
@using Booker.Common
@using Booker.WebUI.Extensions
@model Booker.WebUI.Models.JobClosedownModel
@{
    ViewBag.Title = "Job Closedown";
    ViewBag.MenuSection = "jobs-menu";
}
<div class="main-content">
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <h2>@ViewBag.Title</h2>

                @using (Html.BeginForm("JobClosedown", "Supplier", new {jobRef = Request.QueryString["jobRef"] }, FormMethod.Post, new { @class = "input-form closedown-form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.JobRef)
                    @Html.HiddenFor(m => m.JobType)
                    @Html.HiddenFor(m => m.SiteName)
                    @Html.HiddenFor(m => m.FaultServiceDescription)
                    @Html.HiddenFor(m => m.Notes)
                    @Html.HiddenFor(m => m.DueDate)

                    for (int i = 0; i < Model.PpmTypes.Count; i++)
                    {
                        @Html.HiddenFor(x=>x.PpmTypes[i].Id)
                        @Html.HiddenFor(x => x.PpmTypes[i].Name)
                        @Html.HiddenFor(x => x.PpmTypes[i].DocumentRequired)
                    }

                    @Html.ValidationSummary(false, "We're missing some information:")
                    <div class="form-group">
                        <span><strong>Job Ref:</strong></span> @Request.QueryString["jobRef"]
                    </div>
                    <div class="form-group">
                        <span><strong>Job Type:</strong></span> @Model.JobType
                    </div>
                    <div class="form-group">
                        <span><strong>Site Name:</strong></span> @Model.SiteName
                    </div>
                    <div class="form-group">
                        <span>
                            <strong>
                                @(Model.JobType == JobTypes.PPM ? "PPM Type:" : "Fault Service:")
                            </strong>
                        </span> @Model.FaultServiceDescription
                    </div>
                    <div class="form-group">
                        <span><strong>Job Notes:</strong></span> @Model.Notes
                    </div>
                    <div class="form-group">
                        <span><strong>Due Date:</strong></span> @Html.TextOrEmptyString(Model.DueDate.ToCurrentCultureShortDate())
                    </div>
                    <div class="form-group">
                        <span><strong>Affirmation:</strong></span> @Html.BootstrapDropDownListFor(model => model.SelectedAffirmation, Model.AffirmationItems)
                    </div>
                    <div class="form-group return-date-row">
                        <span><strong>Return Date:</strong></span><span class="return-date-warning"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>  Warning. This date is after the Due Date.</span>
                        @Html.BootstrapTextBoxFor(m => m.ReturnDate.ToCurrentCultureDateTime(), new { @class = "jquery_datepicker", autocomplete = "off" })
                    </div>
                    <div class="form-group">
                        <span id="CertificateCompletedSpan" style="display: none">
                            @Html.CheckBoxFor(m => m.CertificateCompleted)&nbsp;@Html.LabelFor(m => m.CertificateCompleted, null, new { style = "display: inline" })
                        </span>
                        <span id="QuoteRequiredSpan" style="display: none; margin-left: 10px">
                            @Html.CheckBoxFor(m => m.QuoteRequired)&nbsp;@Html.LabelFor(m => m.QuoteRequired, null, new { style = "display: inline" })
                        </span>
                    </div>
                    <div class="closedown-certificate-input">
                        <div class="form-group">
                            <span><strong>Certificate Type:</strong></span> @Html.BootstrapDropDownListFor(model => model.SelectedCertificateType, Model.CertificateItems)
                        </div>
                        <div class="form-group">
                            <span><strong>Certificate Number:</strong></span> @Html.BootstrapTextBoxFor(m => m.CertificateNumber)
                        </div>
                    </div>
                    <div class="form-group">
                        <table id="observations" class="responsive clicktable" data-empty-table="There are no Recommendations & Observations">
                            <thead>
                                <tr>
                                    <th>Recommendations / Observations</th>
                                </tr>
                            </thead>
                            <tbody id="ObservationsBody"></tbody>
                        </table>
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#ObservationModal">
                            <span class="glyphicon glyphicon-plus"></span>
                            <span>Add a Recommendation / Observation</span>
                        </button>
                    </div>
                    <div class="form-group">
                        <strong>Supplier Notes:</strong>&nbsp;<span class="countdown"></span>
                        @Html.TextAreaFor(model => model.SupplierNotes, new { @class = "supplier-notes form-control", @placeholder = "Enter your Supplier Notes", maxlength = 500 })
                    </div>
                    <div class="form-group signature-container">
                        <span><strong>Customer Signature:</strong></span>
                        @Html.HiddenFor(m => m.BlankSignatureData)
                        @Html.HiddenFor(m => m.SignatureData)
                        <canvas id="signature" class="signature"></canvas>
                    </div>
                    <p>
                        <input type="submit" value="Stop Work" class="btn btn-primary" />
                    </p>
                }
                <div>
                    <hr />
                    @Html.ActionLink("<< Back to Open Jobs", "JobsOutstanding", "Supplier")
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="ObservationModal" tabindex="-1" role="dialog" aria-labelledby="ObservationLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="ObservationLabel">Add New</h4>
            </div>
            <div class="modal-body">
                <div id="ObservationError" class="validation-summary-errors" style="display: none">Sorry, there was an unexpected error processing your request.</div>
                <form>
                    <div class="form-group">
                        <label for="ObservationText" class="control-label">Recommendation / Observation:</label>
                        <textarea class="form-control" id="ObservationText"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="AddObservation">Add</button>
            </div>
        </div>
    </div>
</div>
<script id="observations-template" type="text/x-handlebars-template">
    {{#each Observations}}
    <tr>
        <td>
            {{NoteText}}
        </td>
    </tr>
    {{else}}
    <tr>
        <td>
            There are no Observations / Recommendations.
        </td>
    </tr>
    {{/each}}
</script>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryvalcustom")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jquerydatatables")
    @Scripts.Render("~/bundles/handlebars")
    @Scripts.Render("~/bundles/supplierhelpers")
    @Scripts.Render("~/bundles/jobclosedown")
    @Scripts.Render("~/bundles/placeholderpolyfill")
    @Scripts.Render("~/bundles/signaturepad")
    <script>
        var helper = new CommonHelpers();
        helper.initialiseDatePickers();
    </script>
}
@section css {
    @Styles.Render("~/Content/themes/base/css")
}