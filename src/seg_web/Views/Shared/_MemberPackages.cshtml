@using Booker.WebUI.Models
@model PpmTypePackageSubscriptionModel

<script src="~/Scripts/alertify/alertify.min.js"></script>
<link href="~/Content/alertify/alertify.core.css" rel="stylesheet" />
<link href="~/Content/alertify/alertify.bootstrap.css" rel="stylesheet" />
@using (@Html.BeginForm(null, null, FormMethod.Post, new { @class = "form", id = "PackageSubscription", name = "PackageSubscription", onsubmit = "return ValidateAllPackagesHaveBeenSelected();" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.MemberId)

    <div class="validation-summary-errors hide">
        <ul><li><strong>Please fix the errors on the page</strong></li></ul>
    </div>

    for (int i = 0; i < Model.MemberSites.Count; i++)
    {
        <table id="packagesList" class="table table-responsive  table-hover table-bordered" data-table-id="@Model.MemberSites[i].SiteId">
            <tr class="default-top-margin default-bottom-margin">
                <td class="siteHeading" colspan="6">
                    @Html.HiddenFor(x => x.MemberSites[i].SiteId) @Html.DisplayFor(x => x.MemberSites[i].Site)<br />
                    <span class="normalFontWeight">Site Location: @Html.DisplayFor(x => x.MemberSites[i].AddressLine1)  @Html.DisplayFor(x => x.MemberSites[i].AddressLine2)  @Html.DisplayFor(x => x.MemberSites[i].City)  @Html.DisplayFor(x => x.MemberSites[i].PostCode)</span>

                    @Html.HiddenFor(x => x.MemberSites[i].SizeIndicator, new { @class = "sizeIndicator" })
                </td>
            </tr>
            <tr>
                <th class="col-sm-3">
                    Package Name
                </th>

                <th class="col-sm-2">
                    Store Size
                </th>
                <th class="col-sm-1">Size Info</th>
                <th class="col-sm-2">
                    Subscribe
                </th>
                <th class="col-sm-2">
                    Last Service Date If Known
                </th>
                <th class="col-sm-2">
                    Proposed Date
                </th>
            </tr>

            @for (int j = 0; j < Model.MemberSites[i].LstPackageDisplayItems.Count; j++)
            {

                var ppmTypeIds = Convert.ToString(@Html.Action("GetPackagePPMTypesByPackageId", "HelpDesk", new { packageId = Model.MemberSites[i].LstPackageDisplayItems[j].PackageId }));
                 
                
                @*//Checking the package for this site has a cost. If yes then show the package else hide
                //var visibility = Convert.ToDouble(@Html.Action("GetPackageCostByPackageAndSizeIndicator", "HelpDesk", new { servicePackageName = Model.MemberSites[i].LstPackageDisplayItems[j].Name, sizeIndicator = Model.MemberSites[i].SizeIndicator }).ToString()) > 0 ? "" : "class=hide";
                ////@visibility*@
                <tr data-ppmTypeIds="@ppmTypeIds">
                    <td>
                        @Html.HiddenFor(x => x.MemberSites[i].LstPackageDisplayItems[j].PackageId, new { @class = "packageId" })
                        @Html.HiddenFor(x => x.MemberSites[i].LstPackageDisplayItems[j].Name)
                        @Html.DisplayFor(x => x.MemberSites[i].LstPackageDisplayItems[j].Name)
                    </td>
                    <td>
                        <div class="form-group">
                            @Html.DropDownListFor(x => x.MemberSites[i].LstPackageDisplayItems[j].Size, Model.MemberSites[i].LstPackageDisplayItems[j].SizesList, new { @class = "form-control dropdownFont sizeDropDown", onchange = "CalculateCost();ValidateSelectedPackages("+@Model.MemberSites[i].SiteId+"); return false;" })

                        </div>


                    </td>
                    <td>
                        @Html.Raw("&nbsp;")<button type="button" class="btn btn-sm btn-primary" onclick="GetPackageSizeDescription(this); return false;">
                        <span class="glyphicon glyphicon-info-sign"></span>
                    </button>
                </td>
                <td>
                    <label class="radio-inline">@Html.RadioButtonFor(x => x.MemberSites[i].LstPackageDisplayItems[j].IsSubscribed, true, new { onchange = "CalculateCost(); ValidateSelectedPackages("+@Model.MemberSites[i].SiteId+"); return false;" })Yes</label>
                    <label class="radio-inline">@Html.RadioButtonFor(x => x.MemberSites[i].LstPackageDisplayItems[j].IsSubscribed, false, new { onchange = "CalculateCost();ValidateSelectedPackages("+@Model.MemberSites[i].SiteId+"); return false;" })No</label>
                </td>
                <td>
                    @Html.DropDownListFor(x => x.MemberSites[i].LstPackageDisplayItems[j].LastServiceDate, ViewBag.ListOfLastServiceDates as IEnumerable<SelectListItem>, new { @class = "form-control dropdownFont" })
                </td>
                <td>
                    @Html.DropDownListFor(x => x.MemberSites[i].LstPackageDisplayItems[j].ProposedDate, ViewBag.ListOfProposedServiceDates as IEnumerable<SelectListItem>, new { @class = "form-control dropdownFont" })
                </td>
            </tr>
            }
            @{ var spanId = "span" + i;
             var costingId = "costing" + i;

            }
            <tr>
                <td colspan="6">
                    <div class="row">

                        <div class="col-sm-2 p15l"><p>Parking Availability</p></div>
                        <div class="col-sm-4">
                            @Html.DropDownListFor(x => x.MemberSites[i].ParkingAvailability, ViewBag.ParkingAvailabilityList as IEnumerable<SelectListItem>, new { @class = "form-control dropdownFont" })
                        </div>
                    </div>

                    <div class="row">

                        <div class="col-sm-2 p15l"><p>Access Time</p></div>
                        <div class="col-sm-4">
                            @Html.TextBoxFor(x => x.MemberSites[i].AccessTime, new { @class = "form-control dropdownFont" })
                        </div>
                    </div>
                    <div class="row default-top-margin">

                        <div id=@costingId class="col-sm-2 hide p15l"><p>Cost</p></div><div class="col-sm-4"><span id=@spanId></span></div>
                    </div>
                </td>
            </tr>
        </table>

    }

    if (Model.MemberSites.Any())
    {

        <div class="row hide" id="totalCostContainer">
            <div class="col-sm-2">
                <label class="form-control"> Total Cost </label>
            </div>
            <div class="col-sm-4">
                <span id="totalCost" class="hide form-control"></span>
            </div>
        </div>

        <div class="row">

            <div class="col-sm-7 col-sm-offset-2">

                <input class="btn btn-success dropdownFont submitForSignupApproval" type="submit" value="Submit For Approval" />
                <input class="btn btn-danger dropdownFont" value="Cancel Signup" onclick="window.location.href='/HelpDesk/ActiveLeads';" />
                <input class="btn btn-warning dropdownFont submitForQuote" value="Get Quote" />

            </div>
        </div>
    }
    else
    {

        <div class="row">
            <div class="col-sm-8">
                <p class="well">Please add member sites to sign them up for packages.<br /></p>
            </div>
            <div class="col-sm-4">
            </div>
        </div>

    }

}

<div id="myModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h4 class="modal-title">Package size description!</h4>
            </div>
            <div class="modal-body">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->