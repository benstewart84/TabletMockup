@using Booker.WebUI.Extensions
@using Booker.WebUI.Helpers
@model Booker.WebUI.Models.FirstApprovalInvoiceModel

@{
    ViewBag.Title = Model.ReadOnly ? "View Invoice" : "Invoice Approval";
    ViewBag.MenuSection = "invoices-menu";
    const string controllerName = "InvoiceApproval";
    const string documentActionName = "FirstApproval";
    var pdfUrl = Url.Action("InvoiceDocument", controllerName, new { id = Model.InvoiceHeader.Id, documentType = Model.CurrentDocumentType, documentReference = Model.CurrentDocumentReference });
}

@section css {
    @Styles.Render("~/Content/themes/base/css")
}
<div class="main-content">
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <h2>@ViewBag.Title</h2>
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.InvoiceId)
                @if (Model.IsQueried && !string.IsNullOrWhiteSpace(Model.SupplierResponse))
                {
                    <div class="validation-summary-errors">
                        This Invoice was queried and the Supplier has provided the following response:
                        <br />
                        <br />
                        <ul style="margin-bottom: 0">
                            <li>@Model.SupplierResponse</li>
                        </ul>
                    </div>
                }

                @if (Model.Stage2RejectionReason != null)
                {
                    <p class="validation-summary-errors">
                        Invoice rejected at stage 2 for the following reason: @Model.Stage2RejectionReason.Reason
                    </p>
                }
                @if (Model.CapexApprovalRejectionReason != null)
                {
                    <p class="validation-summary-errors">
                        Invoice rejected by Capex uploader for the following reason: @Model.CapexApprovalRejectionReason.Reason
                    </p>
                }
                @if (Model.HasMissingDocuments)
                {
                    <p class="validation-summary-errors">
                        The invoice has missing documents @(Model.ReadOnly ? "" : "and cannot be approved")
                    </p>
                }
                <div class="invoice-approval">
                    <div class="doc-view">
                        <iframe src="@pdfUrl" scrolling="no" seamless="true"></iframe>
                    </div>

                    <div class="inv-details">

                        <div id="info-tables">

                            <table id="invoice-table" class="horiz-table">
                                <tbody>
                                    <tr>
                                        <th class="right-text w33">Order Ref</th>
                                        <td>@Model.WorkOrder.WorkOrderRef</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Order Value ($)</th>
                                        <td>@Html.DecimalToCurrencyString(Model.WorkOrder.WorkOrderValue)</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Job Ref</th>
                                        <td>@Model.WorkOrder.JobRef</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Site</th>
                                        <td>@Html.TextOrEmptyString(Model.WorkOrder.SiteName)</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Job Date</th>
                                        <td>@Html.TextOrEmptyString(Model.WorkOrder.AlarmDate.ToCurrentCultureDateTime())</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Inv Num</th>
                                        <td>@Model.InvoiceHeader.InvoiceNumber</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Inv Date</th>
                                        <td>@Model.InvoiceHeader.InvoiceDate</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Supplier</th>
                                        <td>@Model.Supplier.Name</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Net ($)</th>
                                        <td>@Html.DecimalToCurrencyString(Model.InvoiceHeader.NetAmount)</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Tax ($)</th>
                                        <td>@Html.DecimalToCurrencyString(Model.InvoiceHeader.TaxAmount)</td>
                                    </tr>
                                    <tr>
                                        <th class="right-text w33">Gross ($)</th>
                                        <td>@Html.DecimalToCurrencyString(Model.InvoiceHeader.GrossAmount)</td>
                                    </tr>
                                </tbody>
                            </table>

                        </div>

                        @{ var currentDocumentIndex = Model.CurrentDocumentIndex; }

                        <h3 class="doc-menu">Documents to Check</h3>
                        <ul class="doc-menu">
                            @{
                                for (int i = 0; i < Model.InvoiceDocuments.Count; i++)
                                {
                                    var doc = Model.InvoiceDocuments[i];
                                    var documentLink = Html.ActionLink(Model.InvoiceDocuments[i].Description, documentActionName, controllerName, new { id = Model.InvoiceId, documentIndex = i }, null);
                                    var className = Model.DocumentCheckStates.Checked(i) ? "doc-checked" : null;
                                    if (currentDocumentIndex == i)
                                    {
                                        className = Model.DocumentCheckStates.Checked(i) ? "doc-checked current" : className;
                                        documentLink = Html.ActionLink(Model.InvoiceDocuments[i].Description, "InvoiceDocument", controllerName, new { id = Model.InvoiceId, documentType = doc.Code, documentReference = doc.DocumentReference, inline = false }, null);
                                    }

                                    <li class="@className">@documentLink</li>
                                }
                            }
                        </ul>
                        <div class="doc-nav">
                            <a id="DocumentNavigation" style="display: none;"></a>
                            @if (currentDocumentIndex > 0)
                            {
                                @Html.ActionLink("<< Prev", documentActionName, controllerName, new { id = Model.InvoiceId, documentIndex = currentDocumentIndex - 1 }, new { @class = "float-left" })
                            }
                            @if (currentDocumentIndex + 1 < Model.InvoiceDocuments.Count)
                            {
                                @Html.ActionLink("Next >>", documentActionName, controllerName, new { id = Model.InvoiceId, documentIndex = currentDocumentIndex + 1 }, new { @class = "float-right" })
                            }
                        </div>

                        <p id="button-strip" class="button-strip clearall default-top-margin">
                            @if ((Model.InvoiceDocuments.Count == Model.DocumentCheckStates.CountOfChecked) && (Model.HasMissingDocuments == false))
                            {
                                using (Html.BeginForm("FirstApproval", controllerName, FormMethod.Post, new { style = "display: inline"}))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.HiddenFor(model => model.InvoiceId)
                                    @Html.HiddenForModelValue(model => model.CurrentDocumentIndex)
                                    @Html.HiddenFor(model => model.HasAuthorisationSheet)
                                    @Html.HiddenFor(model => model.IsFirstApprovalKzn)
                                    <input type="hidden" name="SelectedRejectionReason" value="-1" />
                                    <input type="submit" value="Approve" class="btn btn-primary">
                                }
                            }
                            <input id="RejectInvoice" type="button" value="Reject" class="btn btn-danger" data-toggle="modal" data-target="#RejectInvoiceModal">
                            <input id="QueryInvoice" type="button" value="Query" class="btn btn-warning hide" data-toggle="modal" data-target="#QueryInvoiceModal">
                            <input id="ViewInvoiceLines" data-toggle="modal" data-target="#InvoiceLinesModal" type="button" value="View Invoice Lines" class="btn btn-default">
                        </p>
                    </div>
                </div>
            </div>
            <div class="modal fade" id="InvoiceLinesModal" tabindex="-1" role="dialog" aria-labelledby="InvoiceLinesLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title" id="InvoiceLinesLabel">Invoice Lines</h4>
                        </div>
                        <div class="modal-body">
                            <table class="default-top-margin">
                                <thead>
                                    <tr>
                                        <th>Description</th>
                                        <th>Type</th>
                                        <th class="right-text">Quantity</th>
                                        <th class="right-text">Unit Price ($)</th>
                                        <th class="right-text">Value ($)</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var invoiceLine in Model.InvoiceLines)
                                        {
                                        @Html.Partial("_InvoiceLineTableRow", invoiceLine)
                                        }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="4" class="right-text">Total Value ($):</td>
                                        <td class="right-text">@Html.DecimalToCurrencyString(Model.TotalInvoiceLineValue)</td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="flb-container" class="default-top-margin">
                <a id="flb"></a>
                <table id="flb-table" class="horiz-table">
                    <tbody>
                        <tr>
                            <th class="right-text w33">Order Ref</th>
                            <td>@Model.WorkOrder.WorkOrderRef</td>
                        </tr>
                        <tr>
                            <th class="right-text w33">Job Ref</th>
                            <td>@Model.WorkOrder.JobRef</td>
                        </tr>
                        <tr>
                            <th class="right-text w33">Store</th>
                            <td>@Html.TextOrEmptyString(Model.WorkOrder.SiteName)</td>
                        </tr>
                        <tr>
                            <th class="right-text w33">Job Date</th>
                            <td>@Html.TextOrEmptyString(Model.WorkOrder.AlarmDate.ToCurrentCultureDateTime())</td>
                        </tr>
                        <tr>
                            <th class="right-text w33">First Arrival Date/Time</th>
                            <td>@Model.OnSiteTimeArrival</td>
                        </tr>
                        <tr>
                            <th class="right-text w33">Supplier Notes</th>
                            <td>@Model.WorkOrder.SupplierNotes</td>
                        </tr>
                        <tr>
                            <th class="right-text w33">Total Onsite Hours</th>
                            <td><a href="#ClosedownEvents" id="view-closedown-events">@Model.OnSiteTimeDuration</a></td>
                        </tr>
                        @foreach (var gasUsage in Model.GasUsageDetails)
                            {
                            <tr>
                                <th class="right-text w33">Leakage code</th>
                                <td>@gasUsage.LeakageType</td>
                            </tr>
                            <tr>
                                <th class="right-text w33">Gas type</th>
                                <td>@gasUsage.GasType</td>
                            </tr>
                            <tr>
                                <th class="right-text w33">Gas quantity</th>
                                <td>@gasUsage.GasUsage</td>
                            </tr>
                            }
                        @foreach (var cert in Model.Certificates)
                            {
                            <tr>
                                <th class="right-text w33">@cert.CertificateType.Description</th>
                                <td>@cert.CertificateNumber</td>
                            </tr>
                            }
                    </tbody>
                </table>
            </div>
            <div id="closedown-events">
                <a id="ClosedownEvents"></a>
                <table class="default-top-margin">
                    <thead>
                        <tr>
                            <th>Arrival Date/Time</th>
                            <th>Onsite Hours</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ce in Model.OnSiteTimeRecords)
                            {
                            <tr>
                                <td>@ce.OnsiteSATime.ToCurrentCultureDateTime()</td>
                                <td>@ce.Hours.ToHoursAndMinutes()</td>
                            </tr>
                            }
                    </tbody>
                </table>
            </div>
            <div id="job-notes-container" class="default-top-margin">
                <a id="verification"></a>
                <p id="job-notes" class="job-notes">@Model.WorkOrder.JobNotes</p>
            </div>
            <div class="default-top-margin clear">
                <hr />
                @Html.ActionLink("<< Back to Invoice List", "Index", controllerName, null, new { id = "BackButton" })
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="QueryInvoiceModal" tabindex="-1" role="dialog" aria-labelledby="QueryCreditNoteLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Query Invoice</h4>
            </div>
            <div class="modal-body">
                <div id="QueryError" class="validation-summary-errors" style="display: none">Sorry, there was an unexpected error processing your request.</div>
                <form>
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedQueryReason)
                        @Html.BootstrapDropDownListFor(model => model.SelectedQueryReason, Model.QueryReasonSelectList)
                    </div>
                    <div class="form-group invoice-query-other">
                        @Html.LabelFor(model => model.Notes)
                        @Html.TextAreaFor(model => model.Notes)
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="SaveQuery">Save</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="RejectInvoiceModal" tabindex="-1" role="dialog" aria-labelledby="RejectInvoiceLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Reject Invoice</h4>
            </div>
            <div class="modal-body">
                <div id="RejectError" class="validation-summary-errors" style="display: none">Sorry, there was an unexpected error processing your request.</div>
                <form>
                    @Html.HiddenForModelValue(model => model.CurrentDocumentIndex)
                    @Html.HiddenFor(model => model.HasAuthorisationSheet)
                    <div class="form-group">
                        @Html.LabelFor(model => model.SelectedRejectionReason)
                        @Html.BootstrapDropDownListFor(model => model.SelectedRejectionReason, Model.RejectionReasonSelectList)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.RejectionNotes)
                        @Html.TextAreaFor(model => model.RejectionNotes)
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="SaveRejection">Save</button>
            </div>
        </div>
    </div>
</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/dialogs")
    @Scripts.Render("~/bundles/invoiceapproval")
}
