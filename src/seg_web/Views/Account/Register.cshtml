@model Booker.WebUI.Models.RegisterSupplierModel
@using Booker.WebUI.Helpers
@using Newtonsoft.Json;
@{
    ViewBag.Title = "Register user";
    ViewBag.MenuSection = "admin-menu";
}

<div class="main-content">
    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <h2>@ViewBag.Title</h2>


                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary()

                    <fieldset class="header-fields">
                        <legend>Registration Form</legend>
                        <ol>
                            <li>
                                @Html.LabelFor(m => m.UserName)
                                @Html.TextBoxFor(m => m.UserName, htmlAttributes: new { autocomplete = "off" })
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Role)
                                @Html.DropDownListFor(m => m.Role, new SelectList(Model.Roles))
                            </li>
                            <li>
                                @Html.LabelFor(m => m.HelpdeskResourceId)
                                @Html.DropDownListFor(m => m.HelpdeskResourceId, new List<SelectListItem>())
                            </li>
                            <li>
                                @Html.LabelFor(m => m.Password)
                                @Html.PasswordFor(m => m.Password, htmlAttributes: new { autocomplete = "off" })
                            </li>
                            <li>
                                @Html.LabelFor(m => m.ConfirmPassword)
                                @Html.PasswordFor(m => m.ConfirmPassword, htmlAttributes: new { autocomplete = "off" })
                            </li>
                        </ol>
                        <div class="header-row">
                            <div class="editor-for">
                                <p class="buttons">
                                    <input type="submit" value="Register" class="btn btn-primary" />
                                </p>
                            </div>
                        </div>
                    </fieldset>
                }
            </div>
        </div>
    </div>
</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(function () {
        var Suppliers =@Html.Raw(@JsonConvert.SerializeObject(Model.SupplierHelpdeskResources, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        var SupplierTechnicians =@Html.Raw(@JsonConvert.SerializeObject(Model.SupplierTechnicianHelpdeskResources, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        var Customers = @Html.Raw(@JsonConvert.SerializeObject(Model.CustomerHelpdeskResources, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        var Members = @Html.Raw(@JsonConvert.SerializeObject(Model.MemberHelpdeskResources, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        var StoreManagers = @Html.Raw(@JsonConvert.SerializeObject(Model.StoreManagerHelpdeskResources, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        var BookerUsers = @Html.Raw(@JsonConvert.SerializeObject(Model.BookerUserResources, new JsonSerializerSettings{ReferenceLoopHandling = ReferenceLoopHandling.Ignore}));
        var SupplyOnlyUsers =@Html.Raw(@JsonConvert.SerializeObject(Model.SupplyOnlyHelpdeskResources, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
        var AccountsPayableUsers =@Html.Raw(@JsonConvert.SerializeObject(Model.AccountsPayableHelpdeskResources, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));
        var EngineerUsers =@Html.Raw(@JsonConvert.SerializeObject(Model.EngineerHelpdeskResources, new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore }));

        var SupplierRole = "@UserManagementHelper.SupplierRoleName";
        var SupplierTechnicianRole = "@UserManagementHelper.SupplierTechnicianRoleName";
        var MemberRole = "@UserManagementHelper.MemberRoleName";
        var StoreManagerRole = "@UserManagementHelper.SiteManagerRoleName";
        var BookerUserRole = "@UserManagementHelper.UserRoleName";
        var SupplyOnlyRole = "@UserManagementHelper.SupplyOnlyRoleName";
        var AccountsPayableRole = "@UserManagementHelper.AccountsPayableRoleName";
        var EngineerRole = "@UserManagementHelper.EngineerRoleName";

        $("#Role").on("change",function(){
            var selectedRole=$("#Role").val();

            var dataSource =
                selectedRole == SupplierRole ? Suppliers :
                selectedRole == SupplierTechnicianRole ? Suppliers :
                selectedRole == MemberRole ? Members :
                selectedRole == BookerUserRole ? BookerUsers :
                selectedRole == StoreManagerRole ? StoreManagers :
                selectedRole == SupplyOnlyRole ? SupplyOnlyUsers :
                selectedRole == AccountsPayableRole ? AccountsPayableUsers :
                selectedRole == EngineerRole ? EngineerUsers :
                Customers;

            var helpdeskResourceSelect = $("#HelpdeskResourceId");
            $("option",helpdeskResourceSelect).remove();

            if(selectedRole=="")
            {
                helpdeskResourceSelect.append('<option value="">Select role</option>');
            }
            else
            {
                helpdeskResourceSelect.append('<option value="">Select resource</option>');

                for(var ct=0;ct<dataSource.length;ct++)
                {
                    helpdeskResourceSelect.append('<option value="'+ dataSource[ct].Id +'">'+ dataSource[ct].Name +'</option>');
                }
            }
        });

        $("#Role").trigger("change");
    });
</script>
}

@section css{
    <style>
        input, select {
            width: 15em;
        }
    </style>
}
